* GuessTheFlag
*A simple SwuiftUI game to learn flags.*

[[gif.gif]]

** Day 20
 - Stacks: vertical, horizontal and z axis
 - The Color view: Color.red. To use it as a background color, use a ZStack:
#+BEGIN_SRC Swift
ZStack {
    Color.gray.edgesIgnoringSafeArea(.all)
    VStack { }
}
#+END_SRC
 - Color view's frame modifier
#+BEGIN_SRC Swift
Color.blue.frame(width: 20, height: 20)
#+END_SRC
 - Custom color for the Color view
#+BEGIN_SRC Swift
Color(red: 1, green: 0.8, blue: 0, opacity: 0.9)
#+END_SRC
 - Gradient views 
#+BEGIN_SRC Swift
LinearGradient(gradient: Gradient(colors: [Color.white, Color.gray]), startPoint: .top, endPoint: .bottom)
RadialGradient(gradient: Gradient(colors: [Color.gray, Color.white]), center: .top, startRadius: 20, endRadius: 400).edgesIgnoringSafeArea(.all)
AngularGradient(gradient: Gradient(colors: [Color.white, Color.black]), center: .topTrailing).edgesIgnoringSafeArea(.all)
#+END_SRC
 - Buttons & Image with the systemName initializer - using SF Symbols eg (systemName: "pencil") 
#+BEGIN_SRC Swift
Button(action: { print("hit") }) {
                    HStack {
                        Image(systemName: "pencil")
                        Text("Edit")
                    }
}
#+END_SRC
 - Alerts need a @State variable to track when they are shown
#+BEGIN_SRC Swift
struct ContentView: View {
    @State private var showingAlert = false
    
    var body: some View {

    Button(action: {
                    self.showingAlert = true
                }) {
                    HStack {
                        Image(systemName: "pencil.circle")
                        Text("Edit")
                    }
                }.alert(isPresented: $showingAlert) {
                    Alert(title: Text("Edit Mode"), message: Text("You have entered edit mode."), dismissButton: .default(Text("OK")))
                }
    }
}
#+END_SRC
** Day 21
 - Completion handler on Alert
#+BEGIN_SRC Swift
Alert(title: Text(scoreTitle), message: Text("Your score is ??"), dismissButton: .default(Text("Continue")) { self.askQuestion() })
#+END_SRC
 - .clipShape(Shape) modifier
#+BEGIN_SRC Swift
Image(self.countries[number])
                            .renderingMode(.original)
                            .clipShape(Capsule())
                            .overlay(Capsule().stroke(Color.black, lineWidth: 1))
                            .shadow(color: .black, radius: 2)
#+END_SRC
** Day 22 - Challenge
1. Add an @State property to store the user’s score, modify it when they get an answer right or wrong, then display it in the alert.
2. Show the player’s current score in a label directly below the flags.
3. When someone chooses the wrong flag, tell them their mistake in your alert message – something like “Wrong! That’s the flag of France,” for example.
** Day 24 - Challenge 3
#+BEGIN_QUOTE
Go back to project 2 and create a FlagImage() view that renders one flag image using the specific set of modifiers we had.
#+END_QUOTE
For the full list of Code Actions to appear (on cmd + click on the view), the Canvas has to be enabled.
I used the *Extract Subview* Code Action, however I had to add a string property to the View, to pass the country name.
#+BEGIN_SRC Swift
struct FlagImage: View {
    var country: String
    
    var body: some View {
        Image(country)
            .renderingMode(.original)
            .clipShape(Capsule())
            .overlay(Capsule().stroke(Color.black, lineWidth: 1))
            .shadow(color: .black, radius: 2)
    }
}
#+END_SRC
